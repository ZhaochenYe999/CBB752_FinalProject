# Load the libraries and the data
library(dplyr)
library(VariantAnnotation)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(AnnotationDbi)
vcf = readVcf("./Z.variantCall.SNPs.vcf", "hg19")

# Select the chromosome 22 and change the chromosome annotation to match the reference
vcf_chr22 = subset(vcf, seqnames(rowRanges(vcf)) == "22")
vcf_chr22 = keepSeqlevels(vcf_chr22, value = "22", pruning.mode = "coarse")
seqlevels(vcf_chr22) = "chr22"

# Load the gene location reference and call variants in different regions
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
loc = locateVariants(vcf_chr22, txdb, CodingVariants()) 

### A wide choice here: CodingVariants, IntronVariants, FiveUTRVariants, ThreeUTRVariants, IntergenicVariants, SpliceSiteVariants, PromoterVariants, AllVariants. Depending on the desired variant type. ###
### There is a potential issue here that if choosing IntronVariants() in the locateVariants function, the identified genes are located in chromosome 17 and 18 ###
### No genes would be identified with IntergenicVariants() ###

# Get the genesâ€™ Entrez IDs and convert them into Symbols
splt = split(loc$QUERYID, loc$GENEID)
variants = sapply(splt, function(x) length(unique(x)))
gene_ids = names(variants)
symbols = mapIds(org.Hs.eg.db,
                  keys = gene_ids,
                  column = "SYMBOL",
                  keytype = "ENTREZID",
                  multiVals = "first")
df = data.frame(row.names = gene_ids, Mutation_count = variants, Gene_symbol = symbols)

# Get the gene location
gene_locs = genes(txdb, filter = list(gene_id = gene_ids),single.strand.genes.only=T)
gene_locs$symbol = symbols[match(gene_locs$gene_id, gene_ids)]
df_ft = data.frame(
row.names = gene_locs$gene_id,
Chromosome = as.character(seqnames(gene_locs)),
Gene_symbol = gene_locs$symbol,
stringsAsFactors = FALSE
)
df$Chromosome = df_ft[rownames(df),'Chromosome']

# Filter the gene list and rank genes by mutation counts
df = df %>% filter(Chromosome == 'chr22') %>% arrange(desc(Mutation_count))
write.csv(df, file='./genelist/genelist_codingvariant.csv')

# Generate VCF file with variants in the prioritized genes
g10 = rownames(df)[1:10] # Some genes might have the same number of mutations, pressing for new strategies to distinguish them.
g10_locs = gene_locs[names(gene_locs) %in% g10]
vcf_ranges = rowRanges(vcf_chr22)
hits = findOverlaps(vcf_ranges, g10_locs)
vcf_g10 = vcf_chr22[queryHits(hits)]
writeVcf(vcf_g10, "./gene_variants_chr22.vcf")
